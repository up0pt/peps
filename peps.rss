<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/peps.rss</link>
    <description>Newest Python Enhancement Proposals (PEPs) - Information on new language features, and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Wed, 29 Mar 2023 12:52:07 GMT</lastBuildDate>
    <item>
      <title>PEP 709: Inlined comprehensions</title>
      <link>https://peps.python.org/pep-0709/</link>
      <description>Comprehensions are currently compiled as nested functions, which provides isolation of the comprehension's iteration variable, but is inefficient at runtime. This PEP proposes to inline list, dictionary, and set comprehensions into the code where they are defined, and provide the expected isolation by pushing/popping clashing locals on the stack. This change makes comprehensions much faster: up to 2x faster for a microbenchmark of a comprehension alone, translating to an 11% speedup for one sample benchmark derived from real-world code that makes heavy use of comprehensions in the context of doing actual work.</description>
      <author>Carl Meyer (carl@oddbird.net)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0709/</guid>
      <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 708: Extending the Repository API to Mitigate Dependency Confusion Attacks</title>
      <link>https://peps.python.org/pep-0708/</link>
      <description>Dependency confusion attacks, in which a malicious package is installed instead of the one the user expected, are an increasingly common supply chain threat. Most such attacks against Python dependencies, including the recent PyTorch incident, occur with multiple package repositories, where a dependency expected to come from one repository (e.g. a custom index) is installed from another (e.g. PyPI).</description>
      <author>Donald Stufft (donald@stufft.io)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0708/</guid>
      <pubDate>Mon, 20 Feb 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 707: A simplified signature for __exit__ and __aexit__</title>
      <link>https://peps.python.org/pep-0707/</link>
      <description>This PEP proposes to make the interpreter accept context managers whose :meth:`~py3.11:object.__exit__` / :meth:`~py3.11:object.__aexit__` method takes only a single exception instance, while continuing to also support the current (typ, exc, tb) signature for backwards compatibility.</description>
      <author>Irit Katriel (iritkatriel@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0707/</guid>
      <pubDate>Sat, 18 Feb 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 706: Filter for tarfile.extractall</title>
      <link>https://peps.python.org/pep-0706/</link>
      <description>The extraction methods in :external+py3.11:mod:`tarfile` gain a filter argument, which allows rejecting files or modifying metadata as the archive is extracted. Three built-in named filters are provided, aimed at limiting features that might be surprising or dangerous. These can be used as-is, or serve as a base for custom filters.</description>
      <author>Petr Viktorin (encukou@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0706/</guid>
      <pubDate>Thu, 09 Feb 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 704: Require virtual environments by default for package installers</title>
      <link>https://peps.python.org/pep-0704/</link>
      <description>This PEP recommends that package installers like pip  require a virtual environment by default on Python 3.13+.</description>
      <author>Pradyun Gedam (pradyunsg@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0704/</guid>
      <pubDate>Mon, 16 Jan 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 703: Making the Global Interpreter Lock Optional in CPython</title>
      <link>https://peps.python.org/pep-0703/</link>
      <description>CPython's global interpreter lock ("GIL") prevents multiple threads from executing Python code at the same time.  The GIL is an obstacle to using multi-core CPUs from Python efficiently.  This PEP proposes adding a build configuration (--disable-gil) to CPython to let it run Python code without the global interpreter lock and with the necessary changes needed to make the interpreter thread-safe.</description>
      <author>Sam Gross (colesbury at gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0703/</guid>
      <pubDate>Mon, 09 Jan 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 702: Marking deprecations using the type system</title>
      <link>https://peps.python.org/pep-0702/</link>
      <description>This PEP adds an @typing.deprecated() decorator that marks a class or function as deprecated, enabling static checkers to warn when it is used. By default, this decorator will also raise a runtime DeprecationWarning.</description>
      <author>Jelle Zijlstra (jelle.zijlstra@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0702/</guid>
      <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 701: Syntactic formalization of f-strings</title>
      <link>https://peps.python.org/pep-0701/</link>
      <description>This document proposes to lift some of the restrictions originally formulated in PEP 498 and to provide a formalized grammar for f-strings that can be integrated into the parser directly. The proposed syntactic formalization of f-strings will have some small side-effects on how f-strings are parsed and interpreted, allowing for a considerable number of advantages for end users and library developers, while also dramatically reducing the maintenance cost of the code dedicated to parsing f-strings.</description>
      <author>Pablo Galindo (pablogsal@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0701/</guid>
      <pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 8104: 2023 Term Steering Council election</title>
      <link>https://peps.python.org/pep-8104/</link>
      <description>This document describes the schedule and other details of the December 2022 election for the Python steering council, as specified in PEP 13. This is the steering council election for the 2023 term (i.e. Python 3.12).</description>
      <author>Ee Durbin (ee@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-8104/</guid>
      <pubDate>Tue, 08 Nov 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 705: TypedMapping: Type Hints for Mappings with a Fixed Set of Keys</title>
      <link>https://peps.python.org/pep-0705/</link>
      <description>PEP 589 defines the structural type :class:`~typing.TypedDict` for dictionaries with a fixed set of keys. As TypedDict is a mutable type, it is difficult to correctly annotate methods which accept read-only parameters in a way that doesn't prevent valid inputs. This PEP proposes a type constructor typing.TypedMapping to support this use case.</description>
      <author>Alice Purcell (alicederyn@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0705/</guid>
      <pubDate>Mon, 07 Nov 2022 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
